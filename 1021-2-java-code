SERVLET FOR STORING DATA
-----------


package com.digisite.core.servlets;
 
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;
 
import javax.servlet.Servlet;
import javax.servlet.http.HttpServletResponse;
 
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.servlets.SlingAllMethodsServlet;
import org.osgi.service.component.annotations.Component;
 
@Component(service = Servlet.class, immediate = true,
        property = {
                "sling.servlet.paths=/bin/subscribe1"
        }
)
public class SubscribeServlet extends SlingAllMethodsServlet {
 
    private static final long serialVersionUID = 1L;
    private static final AtomicInteger counter = new AtomicInteger(0);
 
    public void doGet(SlingHttpServletRequest req, SlingHttpServletResponse resp) throws IOException {
 
        try {
            String firstname = req.getParameter("First Name");
            String lastname = req.getParameter("Last Name");
            String email = req.getParameter("Email Id");
            ResourceResolver resolver = req.getResourceResolver();
 
            Map<String, Object> map = new HashMap<>();
 
            map.put("First Name", firstname);
            map.put("Last Name", lastname);
            map.put("Email Id", email);
 
            // Generate a unique identifier for the node name
            String identifier = String.valueOf(counter.getAndIncrement());
 
            // Generate a unique timestamp for the node name
            String timeStamp = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
 
            // Construct the node name with the timestamp and identifier
            String nodeName =  timeStamp + "_" + identifier;
 
            // Construct the node path
            String nodePath = "/content/digisite/us/en/subscribe/jcr:content/" + nodeName;
 
            // Create the new node
            Resource parentResource = resolver.getResource("/content/digisite/us/en/subscribe/jcr:content");
            resolver.create(parentResource, nodeName, map);
 
            resp.getWriter().write("Thank you for submitting");
            resolver.commit();
 
        } catch (IOException e) {
            resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error processing the request");
        }
    }
}
---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
SERVLET FOR RETERVING DATA
---------------------------
package com.digisite.core.servlets;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.apache.sling.api.servlets.SlingAllMethodsServlet;
import org.osgi.service.component.annotations.Component;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;

import javax.servlet.Servlet;
import javax.servlet.ServletException;
import java.io.IOException;
import java.util.Iterator;

@Component(service = Servlet.class, immediate = true,
    property = {
        "sling.servlet.paths=/bin/NodePropertiesServlet1"
    }
)

public class NodePropertiesServlet extends SlingAllMethodsServlet {
    private static final Logger log = LoggerFactory.getLogger(NodePropertiesServlet.class);

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) throws ServletException, IOException {
        response.setContentType("text/html");
        ResourceResolver resolver = request.getResourceResolver();
        
       
        log.info("NodePropertiesServlet invoked.");

       
        Resource parentResource = resolver.getResource("/content/digisite/us/en/subscribe/jcr:content");

        if (parentResource != null) {
            Iterator<Resource> children = parentResource.listChildren();
            StringBuilder tableContent = new StringBuilder();
            tableContent.append("<table border=\"1\"><tr><th>First Name</th><th>Last Name</th><th>Email</th></tr>");

            while (children.hasNext()) {
                Resource child = children.next();
                // Accessing properties of each child node
                String firstName = child.getValueMap().get("First Name", String.class);
                String lastName = child.getValueMap().get("Last Name", String.class);
                String email = child.getValueMap().get("Email Id", String.class);

                // Add the row to the table
                tableContent.append("<tr><td>").append(firstName).append("</td><td>").append(lastName).append("</td><td>").append(email).append("</td></tr>");
                
                // Log node information
                log.info("Node properties: First Name: {}, Last Name: {}, Email: {}", firstName, lastName, email);
            }

            tableContent.append("</table>");

            // Write the table to the response
            response.getWriter().write(tableContent.toString());
        } else {
            response.getWriter().write("Parent resource not found.");
            // Log error message
            log.error("Parent resource not found.");
        }
        
        // Log servlet completion
        log.info("NodePropertiesServlet completed.");
    }
}
