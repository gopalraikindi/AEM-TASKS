package com.adobe.aem.mysite.site.core.servlets;

import org.apache.sling.api.servlets.HttpConstants;
import org.apache.sling.api.servlets.SlingAllMethodsServlet;
import org.apache.sling.api.servlets.ServletResolverConstants;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolverFactory;
import org.apache.sling.api.resource.LoginException;
import org.osgi.service.component.annotations.Component;
import org.osgi.framework.Constants;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.servlet.Servlet;
import javax.servlet.ServletException;
import java.io.IOException;
import com.day.cq.search.PredicateGroup;
import com.day.cq.search.Query;
import com.day.cq.search.QueryBuilder;
import com.day.cq.search.result.SearchResult;
import java.util.Map;
import java.util.HashMap;
import java.util.Iterator;
import javax.jcr.Session;

@Component(service = { Servlet.class }, property = {
        Constants.SERVICE_DESCRIPTION + "=Custom Servlet to find CF models",
        ServletResolverConstants.SLING_SERVLET_PATHS + "=/bin/cfmodelsearch",
        ServletResolverConstants.SLING_SERVLET_METHODS + "=" + HttpConstants.METHOD_GET })
public class CFModelSearchServlet extends SlingAllMethodsServlet {
    private static final Logger LOG = LoggerFactory.getLogger(CFModelSearchServlet.class);

    @Reference
    private ResourceResolverFactory resolverFactory;

    @Reference
    private QueryBuilder queryBuilder;

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response)
            throws ServletException, IOException {
        

        // Get CF model name from request parameter
        String cfModel = request.getParameter("cfModel");
       if (cfModel == null || cfModel.isEmpty()) {
            response.getWriter().write("Please provide a CF model name.");
            LOG.error("No CF model name provided in the request.");
            return;
        }

        ResourceResolver resourceResolver = null;
        try {
            // Get resource resolver
            resourceResolver = newResolver(resolverFactory);
            if (resourceResolver == null) {
                LOG.error("Resource resolver is null.");
                response.getWriter().write("Failed to get resource resolver.");
                return;
            }
  
         // Construct the full path
          String basePath = "/conf/mysite/settings/dam/cfm/models";
          String fullPath = basePath + "/" + cfModel;
            
            // Define query parameters
            Map<String, String> map = new HashMap<>();
            map.put("path", "/content/dam/mysite");
            map.put("property", "jcr:content/data/cq:model");
            map.put("property.value", fullPath);
            
            LOG.info("Query parameters: {}", map); 

            // Create the query
          Query query = queryBuilder.createQuery(PredicateGroup.create(map), resourceResolver.adaptTo(Session.class));

            // Execute the query
            SearchResult result = query.getResult();
            
          
            LOG.info("333 " + result.getQueryStatement());

   
         // Process results
            response.getWriter().write("Matching CF Models:\n");
            Iterator<Resource> resourceIterator = result.getResources();
            while (resourceIterator.hasNext()) {
                Resource resource = resourceIterator.next();
                String resourcePath = resource.getPath();
                String cfModelName;
                int lastIndex = resourcePath.lastIndexOf("/");
                if (lastIndex != -1 && lastIndex + 1 < resourcePath.length()) {
                    cfModelName = resourcePath.substring(lastIndex + 1);
                } else {
                    cfModelName = resourcePath; // Use full path if unable to extract CF model name
                }
                response.getWriter().write(cfModelName + "\n");
            }


            

        } catch (Exception e) {
            LOG.error("Error occurred while executing query.", e);
            response.getWriter().write("An error occurred while executing the query.");
        } finally {
            // Close the resource resolver
            if (resourceResolver != null && resourceResolver.isLive()) {
                try {
                    resourceResolver.close();
                } catch (Exception e) {
                    LOG.error("Error closing resource resolver.", e);
                }
            }
        }
    }
    
    public static final String GEEKS_SERVICE_USER = "geeksserviceuser";
    
	public ResourceResolver newResolver(ResourceResolverFactory resourceResolverFactory) throws LoginException {
		final Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(ResourceResolverFactory.SUBSERVICE, GEEKS_SERVICE_USER);
 
		// fetches the admin service resolver using service user.
		ResourceResolver resolver = resourceResolverFactory.getServiceResourceResolver(paramMap);
		return resolver;
	}
}
