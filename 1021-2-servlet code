package com.adobe.aem.mysite.site.core.servlets;

import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import javax.jcr.Session;
import javax.servlet.Servlet;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;

import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.servlets.HttpConstants;
import org.apache.sling.api.servlets.ServletResolverConstants;
import org.apache.sling.api.servlets.SlingAllMethodsServlet;
import org.osgi.service.component.annotations.Component;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.day.cq.search.PredicateGroup;
import com.day.cq.search.Query;
import com.day.cq.search.QueryBuilder;
import com.day.cq.search.result.SearchResult;

@Component(service = Servlet.class,
        property = {
                ServletResolverConstants.SLING_SERVLET_PATHS + "=/bin/contentFragments",
                ServletResolverConstants.SLING_SERVLET_METHODS + "=" + HttpConstants.METHOD_GET
        })
public class ContentFragmentServlet extends SlingAllMethodsServlet {

    private static final Logger LOG = LoggerFactory.getLogger(ContentFragmentServlet.class);

    @Override
    protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/plain");
        //ServletOutputStream outputStream = response.getOutputStream();

        try {
            // Get the requested CFM name from the request parameter
            String cfModel = request.getParameter("cfModel");

            // Check if the CFM name is provided
            //if (requestedCFMName == null || requestedCFMName.isEmpty()) {
//                outputStream.println("Please provide a valid CFM name.");
//                return;
//            }

            // Get the ResourceResolver
            ResourceResolver resourceResolver = request.getResourceResolver();
           
            String basePath = "/conf/mysite/settings/dam/cfm/models";
            String fullPath = basePath + "/" + cfModel;

            // Get the QueryBuilder
            QueryBuilder queryBuilder = resourceResolver.adaptTo(QueryBuilder.class);

            // Build the query map
            Map<String, String> queryMap = new HashMap<>();
            queryMap.put("path", "/content/dam/mysite");
            queryMap.put("property", "jcr:content/data/cq:model");
            queryMap.put("property.value",fullPath);

            // Create the query
            Query query = queryBuilder.createQuery(PredicateGroup.create(queryMap), resourceResolver.adaptTo(Session.class));

            // Execute the query
            SearchResult result = query.getResult();

            LOG.info("Query statement: {}", result.getQueryStatement());

            // Process results
            response.getWriter().write("Matching CF Models:\n");
            Iterator<Resource> resourceIterator = result.getResources();
            while (resourceIterator.hasNext()) {
                Resource resource = resourceIterator.next();
                String resourcePath = resource.getPath();
                String cfModelName = resourcePath.substring(resourcePath.lastIndexOf("/") + 1);
                response.getWriter().write(cfModelName + "\n");
            }
        } catch (Exception e) {
            response.getWriter().write("An error occurred while executing the query.");
        }
    }
}
